{-|
Module      : HexPalette
Description : hex palette example
Copyright   : Just Nothing
Stability   : in progress
-}
module HexPalette(mainPallete) where
import Data.Char
-- | главная палитра, передаваемая как основная
mainPallete :: [(Float,Float,Float)]
mainPallete = exportPallete `seq` exportPallete -- stdGrad 128
-- | палитра на экспорт, ленивая заготовка
exportPallete :: [(Float,Float,Float)]
exportPallete = zipTo3 list
-- | сворачивание списка в кортежи по три компоненты
zipTo3 :: [Float] -> [(Float,Float,Float)]
zipTo3 (x:y:z:lst) = (x,y,z) : (zipTo3 lst)
zipTo3 _ = []
-- | конвертация в Float и нормировка списка вида "hh"
list :: [Float]
list = map ((/255) . fromIntegral . convert) (parser sourcePallete)
-- | конвертация списка из шестнадцатиричного байта в Int
convert :: [Char] -> Int
convert (x:y:[]) = (digitToInt x)*16 + (digitToInt y)
convert _ = error "Convert"
-- | парсер строки hex кода на подстроки по два символа (один байт)
parser :: String -> [String]
parser (x:y:xs) = [x,y] : (parser xs)
parser _ = []
-- | огромная палитра в hex коде
sourcePallete :: String
sourcePallete
-- | стандартная палитра оттенков красный-синий,
-- с фиксированной яркостью, но переменной с длиной по параметру
stdGrad :: Int -> [(Float,Float,Float)]
stdGrad len = [(lr+(cfi lt),st,lb-(cfi lt)) | lt <- [1,2..len]]
  where
    st = 128/255
    lr = 0.0
    lb = 1.0
    lc = 1/(fromIntegral len)
    cfi = (lc *) . fromIntegral